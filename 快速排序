
/*
	快速排序的基本思想:
	通过一趟排序将待排序记录分割独立的两个部分，
	其中一个部分记录的关键字均比另一部分记录的关键字小，
	则可分别对这两部分记录继续进行排序，以达到整个序列有序的目的 
*/

#include<stdio.h>

void printArray(int arr[],int length)
{
	for(int i=0;i<length;i++)
	{
		printf("%d ",arr[i]);
	}
}


//划分区域 
int partition(int arr[],int start,int end)
{
	int temp=arr[start];	//关键字进行划分 
	while(start<end)
	{
		//从后往前扫 
		while(start<end && arr[end]>=temp)
		{
			end--;
		}
		if(start<end)
		{
			arr[start]=arr[end];
			start++;
		}
		//从前往后扫 
		while(start<end && arr[start]<=temp)
		{
			start++;
		}
		if(start<end)
		{
			arr[end]=arr[start];
			end--;
		}
	}
	arr[start]=temp;
	return start;
}

//快速排序 
void qucikSort(int arr[],int start,int end)
{
	if(start<end)
	{
		int index=partition(arr,start,end);
		qucikSort(arr,start,index-1);
		qucikSort(arr,index+1,end);
	}
}

int main()
{
	int arr[]={49,38,65,97,13,27,49};
	qucikSort(arr,0,7);
	printArray(arr,8); 
	return 0;
}
