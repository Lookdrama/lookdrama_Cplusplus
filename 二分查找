#include<stdio.h>
#include<stdlib.h>

//二分查找的平均时间长度为:(n+1)*log_2_(n+1)-1

typedef struct List{
	int* data;
	int length;
	int num;
}List;

//初始化
List* initList(int length)
{
	List* list=(List*)malloc(sizeof(List));
	list->data=(int*)malloc(sizeof(int)*length);
	list->length=length;
	list->num=0;
	return list;
}

//顺序表的添加
void listAdd(List* list,int data)
{
	list->data[list->num]=data;
	list->num=list->num+1;
}

//打印顺序表
void printList(List* list)
{
	for(int i=0;i<list->length;i++)
	{
		printf("%d ",list->data[i]);
	}
	printf("\n");
}

//二分查找(循环)
int binarySearch1(int key,List* list)
{
	int start=0;
	int end=list->num-1;
	int mid;
	while(start<=end)
	{
		mid=(start+end)/2;
		if(list->data[mid]<key)
		{
			start=mid+1;
		}
		else if(list->data[mid]>key)
		{
			end=mid-1;
		}
		else
		{
			return mid;	
		}
	}
	return -1;	//没找到
}


//二分查找(递归)
int binarySearch2(int key,List* list,int start,int end)
{
	if(start==end)
	{
		if(list->data[start]==key)
		{
			return start;
		}
		else
		{
			return -1;
		}
	}
	int mid=(start+end)/2;
	if(list->data[mid]<key)
	{
		return binarySearch2(key,list,mid+1,end);
	}
	else if(list->data[mid]>key)
	{
		return binarySearch2(key,list,start,mid-1);
	}
	else
	{
		return mid;
	}
}

int main()
{
	List* list=initList(9);
	listAdd(list,1);
	listAdd(list,2);
	listAdd(list,3);
	listAdd(list,4);
	listAdd(list,5);
	listAdd(list,6);
	listAdd(list,7);
	listAdd(list,8);
	listAdd(list,9);
	printList(list);
	printf("data %d in %d\n",7,binarySearch1(7,list));
	printf("data %d in %d\n",10,binarySearch1(10,list));      
	printf("data %d in %d\n",1,binarySearch1(1,list));      
	printf("data %d in %d\n",7,binarySearch2(7,list,0,list->num-1));      
	printf("data %d in %d\n",10,binarySearch2(10,list,0,list->num-1));      
	printf("data %d in %d\n",1,binarySearch2(1,list,0,list->num-1));      
	return 0;
}
