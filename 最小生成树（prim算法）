#include<stdio.h>
#include<stdlib.h>

/*图顶点之间不通，那么邻接矩阵的值为MAX
  如果顶点是自己本身，那么值为0*/
#define MAX 32767
 
typedef struct Graph{
	char* vexs;		//顶点
	int** arcs;		//权重(使用**目的表示矩阵)
	int vexNum;
	int arcsNum;
}Graph;

//初始化一个图
Graph* initGraph(int vexNum)
{
	Graph* G=(Graph*)malloc(sizeof(Graph));
	G->vexs=(char*)malloc(sizeof(char) *vexNum);
	G->arcs=(int**)malloc(sizeof(int*) *vexNum);
	for(int i=0;i<vexNum;i++)
	{
		G->arcs[i]=(int*)malloc(sizeof(int) *vexNum);
	}
	G->vexNum=vexNum;
	G->arcsNum=0;
	return G;
}

//构建一个图
void createGraph(Graph* G,char* vexs,int* arcs)
{
	for(int i=0;i<G->vexNum;i++)
	{
		G->vexs[i]=vexs[i];
		for(int j=0;j<G->vexNum;j++)
		{
			G->arcs[i][j]=*(arcs+i*G->vexNum+j);
			if(G->arcs[i][j]!=0&&G->arcs[i][j]!=MAX)
			{
				G->arcsNum++;
			}
		}
	}
	G->arcsNum=G->arcsNum/2;
}

/*图的遍历：
BFS:广度优先遍历(等同于树的层次遍历)
DFS:深度优先遍历(一条路走到黑,不到南墙不回头,撞墙之后再回头，回头之后在撞墙)
{
	1.找一个节点访问
	2.找这个节点可以到达的节点去访问
	3.重复第一步，直到所有节点访问完毕
}
*/	

void DFS(Graph* G,int* visited,int index)	//visited数组用来存放是否遍历
{
	printf("%c\t",G->vexs[index]);
	visited[index]=1;
	for(int i=0;i<G->vexNum;i++)
	{
		if(G->arcs[index][i]>0 && G->arcs[index][i]!=MAX && !visited[i])
		{
			DFS(G,visited,i);
		}
	}
}

/*
如何实现prim算法
1.记录当前U集合的状态
2.选择最小边以及顶点加入到U集合中
*/

typedef struct Edge{
	char vex;	//记录U集合到最小边的起始结点
	int wegiht;	//记录最小边
}Edge;

//当edge.weight=0时，代表顶点加入到U集合中
Edge* initEdge(Graph* G,int index)
{
	Edge* edge=(Edge*)malloc(sizeof(Edge)*G->vexNum);
	for(int i=0;i<G->vexNum;i++)
	{
		edge[i].vex=G->vexs[index];
		edge[i].wegiht=G->arcs[index][i];
	}
	return edge;
}

//找到最小边的函数
int getMinEdge(Edge* edge,Graph* G)
{
	int index;
	int min=MAX;
	for(int i=0;i<G->vexNum;i++)
	{
		if(edge[i].wegiht!=0 && min>edge[i].wegiht)
		{
			min=edge[i].wegiht;
			index=i;
		}
	}
	return index;
}

void prim(Graph* G,int index)
{
	Edge* edge=initEdge(G,index);
	int min;
	for(int i=0;i<G->vexNum-1;i++)
	{
		min=getMinEdge(edge,G);
		printf("v%c --> v%c,weight=%d\n",edge[min].vex,G->vexs[min],edge[min].wegiht);
		edge[min].wegiht=0;		//将最小的顶点加入到集合U中
		for(int j=0;j<G->vexNum;j++)
		{
			if(G->arcs[min][j]<edge[j].wegiht)
			{
				//更新新的结点
				edge[j].wegiht=G->arcs[min][j];
				edge[j].vex=G->vexs[min];
			}
		}
	}
	
}

int main()
{
	Graph* G=initGraph(6);
	int* visited=(int*)malloc(sizeof(int)*G->vexNum);
	for(int i=0;i<=G->vexNum;i++)
	{
		visited[i]=0;
	}
	int arcs[6][6]={	//邻接矩阵(权重)
		0,6,1,5,MAX,MAX,
		6,0,5,MAX,3,MAX,
		1,5,0,5,6,4,
		5,MAX,5,0,MAX,2,
		MAX,3,6,MAX,0,6,
		MAX,MAX,4,2,6,0
		};
	createGraph(G,"123456",(int*)arcs);
	DFS(G,visited,0);
	printf("\n");
	printf("\n");
	prim(G,0);
	return 0;
}
