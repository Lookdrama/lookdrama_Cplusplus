#pragma once
#include<algorithm>
#include<iostream>
using namespace std;


namespace bit
{
	template<class T>
	struct list_node
	{
		list_node<T>* _next;
		list_node<T>* _prev;
		T _val;

		list_node(const T& val = T())
			:_next(nullptr)
			, _prev(nullptr)
			, _val(val)
		{
			;
		}
	};

	template<class T>
	struct _list_iterator
	{
		typedef list_node<T> Node;
		Node* _node;

		_list_iterator(Node* node)
			:_node(node)
		{
			;
		}

		T& operator* ()
		{
			return _node->_val;
		}

		_list_iterator<T>& operator++ ()
		{
			_node = _node->_next;
			return *this;
		}

		_list_iterator<T>& operator++ (int)
		{
			_list_iterator<T> temp(*this);
			_node = _node->_next;
			return temp;
		}

		bool operator!= (const _list_iterator<T>& it)
		{
			return _node != it._node;
		}

		bool operator== (const _list_iterator<T>& it)
		{
			return _node == it._node;
		}

	};

	template<class T>
	class list {
		typedef list_node<T> Node;
	public:
		typedef _list_iterator<T> iterator;

		iterator begin()
		{
			return _head->_next;	//单参数的构造函数，支持隐式类型转换
			//return iterator(_head->_next);	
		
		}

		iterator end()
		{
			return _head;	//单参数的构造函数，支持隐式类型转换
			//return iterator(_head);
		}

		list()
		{
			_head = new Node;
			_head->_prev = _head;
			_head->_next = _head;
		}

		~list()
		{
			//......
		}

		void push_back(const T& x)
		{
			Node* tail = _head->_prev;
			Node* newnode = new Node(x);
			tail->_next = newnode;
			newnode->_prev = tail;
			newnode->_next = _head;
			_head->_prev = newnode;
		}

	private:
		Node* _head;
	};

	void test_list1()
	{
		list<int> l1;
		l1.push_back(1);
		l1.push_back(2);
		l1.push_back(3);

		list<int>::iterator it = l1.begin();
		while (it != l1.end())
		{
			cout << *it << " ";
			++it;
		}
		cout << endl;

		for (auto e : l1)
		{
			cout << e << " ";
		}
		cout << endl;
	}
}
