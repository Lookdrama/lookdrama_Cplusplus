#include<stdio.h>
#include<stdlib.h>

typedef struct String{
	char* data;
	int len;
}String;

/*初始化字符串*/
String *initString()
{
	String* s=(String *)malloc(sizeof(String));
	s->data=NULL;
	s->len=0;
	return s;
} 

/*建立字符串*/
void stringAssign(String* s,char* data)
{
	char *temp=data;		//创建一个中间变量来存放字符串;
	int len=0;
	if(s->data)		//防止野指针的出现 
	{
		free(s->data);
	} 
	while(*temp)
	{
		len++;
		temp++;
	} 
	if(len==0)
	{
		s->data=NULL;
		s->len=0;
	} 
	else
	{
		temp=data;		//将temp重新指向头指针 
		s->len=len;		//计算字符串长度 
		s->data=(char*)malloc(sizeof(char)*(len+1)); 	//加1是为了存放/n; 
		for(int i=0;i<len;i++)
		{
			s->data[i]=*temp;
			temp++;
		}	
	}
}

//打印字符串 
void printString(String* s)
{
	for(int i=0;i<s->len;i++)
	{
		printf(i==0?"%c":"-> %c ",s->data[i]);	
	}
	printf("\n");
}

int *getNext(String* s)
{
	int* next=(int*)malloc(sizeof(int)*s->len);
	int i=0;
	int j=0;
	next[i]=j;
	while(i<s->len-1)
	{
		if(j==0||s->data[i]==s->data[j])
		{
			i++;
			j++;
			next[i]=j;
		}
		else
		{
			j=next[j];	
		}
	}
	return next;
}

//打印next数组
 void printNext(int* next,int len)
 {
 	for(int i=0;i<len;i++)
 	{
 		printf(i==0?"%c":"-> %c ",next[i]);	
 	}
 	printf("\n");
 }
 
 //KMP匹配 
 void kmpMatch(String* master,String* sub,int* next)
 {
 	int i=0;
 	int j=0;
 	while(i<master->len&&j<sub->len)
 	{
		if(j==0||master->data[i]==sub->data[j])
		{
			i++;
			j++;
		} 	
		else
		{
			j=next[j];	
		}
	}
if(j==sub->len)
	{
		printf("kmp match success.\n");
	}
	else
	{
		printf("kmp match fail.\n");	
	}
 }
 
int main()
{
	String* s=initString();
		String* s1=initString();
		stringAssign(s,"Hello");
		stringAssign(s1,"He");
		printString(s);
		printString(s1);
		kmpMatch(s,s1,getNext(s1));
	return 0;
}
